name: Sidelobe Build Matrix
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: agent #${ { matrix.config.name } }
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        # config:
        # - {
        #     name: "Windows Latest MSVC",
        #     os: windows-latest,
        #     build_type: "Release", cc: "cl", cxx: "cl",
        #     environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
        #   }
        # - {
        #     name: "Ubuntu Latest GCC",
        #     os: ubuntu-latest,
        #     build_type: "Release", cc: "gcc", cxx: "g++"
        #   }
        # - {
        #     name: "macOS Latest Clang",
        #     os: macos-latest,
        #     build_type: "Release", cc: "clang", cxx: "clang++"
        #   }
    env:
      BUILD_WRAPPER_OUT_DIR: deploy/build/bw-output # Directory where build-wrapper output will be placed
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Setup & Cmake
        run: |
          cd deploy
          mkdir -p build
          cd build
          cmake -H. -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=No ../..
      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v1
      - name: Run build-wrapper
        working-directory: deploy/build
        run: |
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }}  make -j 4
          ./AudioTraitsTest
          #cd ..
          #mkdir -p report
          #gcovr -r .. -f ../source  --exclude-unreachable-branches --exclude-throw-branches --sonarqube -o report/coverage.xml  # Generate coverage report
      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"
