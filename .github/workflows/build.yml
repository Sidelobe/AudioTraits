name: Sidelobe Build Matrix
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows MSVC Release",
            os: windows-latest, build_type: "Release", cc: "cl", cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            coverage: 'false'
          }
        - {
            name: "Ubuntu GCC Release (Coverage)",
            os: ubuntu-latest, build_type: Release, cc: "gcc", cxx: "g++",
            coverage: 'true'
          }
        # - {
        #     name: "Ubuntu GCC Debug",
        #     os: ubuntu-latest, build_type: Debug, cc: "gcc", cxx: "g++",
        #     coverage: 'false'
        #   }
        - {
            name: "macOS Clang Release",
            os: macos-latest, build_type: "Release", cc: "clang", cxx: "clang++", 
            coverage: 'false'
          }
        # - {
        #     name: "macOS Clang Debug",
        #     os: macos-latest, build_type: "Debug", cc: "clang", cxx: "clang++", 
        #     coverage: 'false'
        #   }
          
    env:
      BUILD_WRAPPER_OUT_DIR: '$GITHUB_WORKSPACE/deploy/build/bw-output' # Directory where build-wrapper output will be placed
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Setup & Cmake
        run: |
          cd deploy
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} -DCODE_COVERAGE=${{ matrix.config.coverage }} ../..
      - name: Install Toolchain
        if: ${{ matrix.config.coverage == 'true' }}
        run: |
          pip3 install gcovr
          echo "Gcovr Updated!"
          gcovr --version
      
      - name: Build & Run Tests
        env:
          CTEST_OUTPUT_ON_FAILURE: 1
        working-directory: deploy/build
        run: |
          make -j 4
          ctest -C ${{matrix.build_type}} --test-dir test -j 2

      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v1
        if: ${{ matrix.config.coverage == 'true' }}
      - name: Run build-wrapper
        working-directory: deploy/build
        if: ${{ matrix.config.coverage == 'true' }}
        run: |
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }}  make -j 4
          ./AudioTraitsTest
          cd ..
          mkdir -p report
          gcovr -r .. -f ../source  --exclude-unreachable-branches --exclude-throw-branches --sonarqube -o report/coverage.xml  # Generate coverage report
      - name: Run sonar-scanner
        if: ${{ matrix.config.coverage == 'true ' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"
          
